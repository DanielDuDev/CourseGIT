daniel duareta estapá
aaprendienpd git 

demapsdaksj
ksbjasakj

comandos GIT: 
init 
status
add
config -l
config -- global user.email "nuevo correo"
commit -m "mensaje"
commit Esc + i (escribir mensaje), Esc + Shift + z+z (salir)
log
show 
diff (id1) (id2) 

#### para volver a versiones anteriores
reset (id) --hard(vuelve a ese commit y borra el resto), --soft (vuelve y no borra) (para volver a un estado anterior )

####log
log --stat (permite ver los cambios específicos) (q para salir)
log --all --graph --decorate --oneline
log --online

####fetch
fetch (del repositorio remoto al local, no lo lleva al directorio de trabajo, en mis archivos)

####merge
merge (fusionar con mis archivos)
 

####commit
commit -am "mensaje" (hace add y commit al mismo tiempo)

####branch
branch (nombre de la nueva rama) (crea una nueva rama)
branch -D "nombre de la rama que se quiere elimiar"
branch -M "nombre de la rama que se quiere editat el nombre"
git show-branch --all

gitk

####checkout
checkout (nombre de la rama) (cambia a la nueva rama) [IMPORTANTE, RECORDAR QUE SE DEBE HACER COMMINT EN LA NUEVA RAMA ANTES DE REGRESAR A LA RAMA MASTER]
checkout (id) his (archivo)
checkout (master) his (archivo) para volver al actual

####remote
remote add (nombre remoto) url (normalmente es git remote add origin url)
remote -v
remote rm "name" (para elmiliar)
remote set-url (link ssh)

####pull
pull (fusiona fetch y merge)
pull origin master (trae del repositorio remoto tanto a mis propios archivos como a mi repositorio local)

Esto es para traer los cambios de un respositorio distinto. Normlamente usado para actualizar el repositorio de un fork de github
#### Upstream (palabra opcional, comunmente usada)
git remote add upstream url 
git pull upstream

####push
push origin master (envía todo al respositorio remoto)
push url (enviar al servidor remoto)

#### tag
tag -a v0.1 -m "mensaje"
git show-ref --tags 
tag -d (el tag a eliminar)

#### clone 
clone url 


#### rebase (unir dos ramas salvajemente, parecido a merge)(hacer una rama anónima o silenciosa) (se ajusta) 
1) git rebase (a la otra rama)
2) git rebase (a la rama principal) 

#### stash (moverse a otra rama sin hacer commit en la rama actual, y que no se pierdan los cambios)
git stash 
git stash pop (volver)
git stash branch "nombre de la nueva rama" (poner el cambio en una nueva rama) 
git stah drop (borrar los stash)


#### clean 

#### cherry-pick (traerse un commit específico de otra rama)
cherry-pick(id del commit que me interesa)
cherry-pick --skip (para salirse en caso de no saber resolver un conflicto, los conflitos se generan cuando chocan dos partes que estan en ambas ramas)

#### COMANDO PARA ERRORES ####

#### amend (borrar commits, pegar los cambios que realmente quiero al commit anterior que es el que no quiero) ¡Bendito!

el flujo estricto es (el commit que quiero "borrar" obviamente ya está hecho): 
1) git add 
2) git commit --amend 

___________________________________________________________


####crear llave SSH: 
ssh-keygen -t rsa -b 4096 -C "danydu1299@gmail.com"

####verificar que las llaves esten corriendo para el cifrado:
eval $(ssh-agent -s) 

####agregar la llave: 
ssh-add ~/.ssh/id_rsa

####crear alias para los comandos: 
alias (nombre del alias)="comando"

